{"version":3,"sources":["../../inlined/directives/share-button/share-button.directive.ts"],"names":[],"mappings":"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","file":"share-button.directive.js","sourceRoot":"","sourcesContent":["import {\n    Directive,\n    OnChanges,\n    Input,\n    Output,\n    HostListener,\n    SimpleChanges,\n    EventEmitter\n} from '@angular/core';\n\nimport { ShareButtonsService } from '../../services/share-buttons.service';\nimport { ShareArgs, ShareProvider, Helper } from '../../helpers/index';\n\n\nexport class ShareButtonDirective implements OnChanges {\n\n    /** Button type e.g. fb, twitter, reddit...etc */\n    private provider: ShareProvider;\n\n     set shareButton(value: string | number) {\n        this.provider = Helper.getEnumValue(value, ShareProvider);\n\n        if (typeof this.provider === 'undefined') {\n            throw new Error(`[shareButton] must be set to one of the values (numeric or string) of ShareProvider enum: was '${value}'`);\n        }\n    }\n\n\n    /** Share Args */\n     sbUrl: string;\n     sbTitle: string;\n     sbDescription: string;\n     sbImage: string;\n     sbTags: string;\n     sbShowCount: boolean;\n\n    /** Output button count to calculate total share counts */\n     sbCount = new EventEmitter<number>();\n    /** Output pop up closed*/\n     sbPopUpClosed = new EventEmitter<ShareProvider>();\n\n     onClick() {\n        this.share();\n    }\n\n    constructor(private sbService: ShareButtonsService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        /** Validate URL */\n        this.sbUrl = this.sbService.validateUrl(this.sbUrl);\n\n        if (changes['sbUrl']) {\n            let currUrl = changes['sbUrl'].currentValue;\n            let prevUrl = changes['sbUrl'].previousValue;\n\n            if (currUrl && currUrl !== prevUrl) {\n                /** Add share count if enabled */\n                if (this.sbShowCount) {\n                    this.sbService.count(this.provider, this.sbUrl, this.sbCount);\n                }\n            }\n        }\n    }\n\n    /** Open share window */\n    share() {\n        let args = new ShareArgs(this.sbUrl, this.sbTitle, this.sbDescription, this.sbImage, this.sbTags);\n        this.sbService.share(this.provider, args, this.sbPopUpClosed);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[shareButton]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ShareButtonsService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'shareButton': [{ type: Input },],\n'sbUrl': [{ type: Input },],\n'sbTitle': [{ type: Input },],\n'sbDescription': [{ type: Input },],\n'sbImage': [{ type: Input },],\n'sbTags': [{ type: Input },],\n'sbShowCount': [{ type: Input },],\n'sbCount': [{ type: Output },],\n'sbPopUpClosed': [{ type: Output },],\n'onClick': [{ type: HostListener, args: ['click', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}